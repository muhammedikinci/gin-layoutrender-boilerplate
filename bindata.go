// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// public/assets/css/index.css
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicAssetsCssIndexCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x6d\x6f\xe4\xb6\x73\x7f\xaf\x4f\x31\xf5\xa1\xb8\xd8\x90\xf6\xd1\x7b\xbe\x55\x10\x14\xd7\x43\x82\x06\xb8\x4b\x8a\x38\x79\x15\x1c\xba\x94\x38\x2b\xf1\x4c\x91\x2a\x49\xed\x7a\x9d\xdc\x77\x2f\xf8\x20\xad\xa4\x95\x7d\x69\x9b\x3f\xfe\xaf\xec\xe5\x90\x9c\xe7\xdf\x0c\x47\xf3\x9b\xe8\x5f\xc0\x10\xc6\x8f\x4c\xd0\x5c\x6b\x38\xac\x67\x8b\xd9\xf2\x2d\xfc\x09\x1f\x7f\xfc\x15\x3e\xb0\x1c\x85\x46\xf8\x13\x4a\x63\x6a\x9d\xce\xe7\xbd\xbd\xb3\x5c\x56\xd1\xcd\x3c\x8a\xe6\x37\xd1\x72\x06\xff\xa9\xf0\x80\xc2\x40\x4d\x28\x65\xa2\x00\x22\x28\x64\x52\x51\x54\xb0\x57\xb2\x02\xb2\xdf\x63\x6e\x2c\x05\x39\x56\x76\xe7\x91\x51\x53\xce\xe0\x9b\xf6\xee\x82\x99\xb2\xc9\xec\xb5\xf3\x4a\x3e\x51\x3c\xe8\x79\xae\xb5\xc2\x0a\xe9\x69\xce\xb4\x6e\x50\xcf\x6f\xaf\xa3\xd5\x0c\xde\x71\x2e\x8f\xd0\x32\x6a\xd9\x18\x09\x44\x74\xb7\x67\x27\xf8\xdc\x68\x33\xde\x95\xbc\xc0\xb5\xa7\xdc\xe0\xff\xba\xe1\x7c\xbe\x5c\xbe\xb9\x76\xea\xde\xc4\x51\x9a\x66\xb8\x97\x0a\xed\x7f\x64\x6f\x50\xc1\x1f\x11\x40\x26\x1f\x13\xcd\x9e\x98\x28\xd2\x96\x59\x26\x1f\xbf\x8d\x00\xe6\x37\xb0\x84\x9b\xb9\xdb\x73\x16\x22\x85\x45\x20\xae\x06\x44\x6d\x4e\x1c\x53\xd0\x92\x33\x3a\xb9\x21\x97\x5c\xaa\x14\x5e\xe1\x06\xef\x30\xeb\x6f\xf9\x12\x3d\x23\x5b\x92\x98\x63\x92\x4b\x61\x50\x98\x14\x5e\xbf\xfe\xd6\x6e\xf5\x8e\xfb\x4d\x23\x10\xc8\xa5\xd0\x4c\x5b\x32\x68\x14\x9a\x65\x1c\x81\x33\x81\x49\x89\xac\x28\x0d\x30\x01\x84\x73\xc8\x94\x3c\x6a\x54\x7a\x66\xdd\xd0\xba\x9c\x50\x6b\x69\x6b\x75\x0d\x72\x0f\x7b\x69\x2f\x61\x4f\x08\x9e\xbf\x54\x0c\x85\x21\x86\x49\x01\x79\x49\x44\x81\xda\x5e\xc7\x7e\xbe\x9f\x45\xeb\x96\x7f\x25\x15\x82\x42\x42\x89\xe5\x6c\x48\xe6\x6e\x98\x45\xb7\x7e\x83\x29\x11\x1a\x8d\xea\xb5\xb6\x92\xee\x59\xd1\x28\xa4\xb0\xd3\x44\xe8\x9d\x63\x98\xec\x49\xc5\xf8\xc9\xba\x9d\xe2\x9e\x34\xdc\xcc\x9c\xb7\x4a\x53\x71\x67\x81\x9e\x32\x29\x2c\x67\x9b\xa1\x5f\x92\x23\x66\x0f\xcc\x24\x06\x1f\x8d\x75\x22\x26\x5e\xa9\x14\x96\x8b\xc5\xbf\x0e\xbd\x90\x54\xf2\x29\x31\x24\x73\xfb\x52\xb8\x0d\xd4\x75\xa0\xca\x31\x0d\x00\x9e\xdd\xdd\x13\x3d\x85\x86\x25\x56\xa1\x44\xa3\x62\xfb\x18\xf4\x49\x1b\xac\x92\x86\xc5\x90\x90\xba\xe6\x98\xf8\x95\x18\xfe\x9d\x33\xf1\xf0\x91\xe4\xf7\xee\xf7\x0f\x52\x98\x18\xae\xee\xb1\x90\x08\xbf\xfd\x78\x15\xc3\x2f\x32\x93\x46\xc6\x70\xf5\x1f\xc8\x0f\x68\x58\x4e\xe0\x27\x6c\xf0\x2a\x86\x77\x8a\x11\x1e\xc3\xd5\x4f\xd2\x48\xb8\x27\x42\x5f\xc5\xd0\xe7\x79\xf5\xce\x32\x82\xf7\x36\xc2\xe0\xfb\x4a\x7e\x66\x57\xbd\xab\x27\x56\xee\x4f\x55\x26\xf9\x55\x7b\x65\xff\x60\xd0\xf4\x36\x04\xa6\x8f\xb6\x5f\xb0\x92\x07\xef\xcf\x8a\xa8\xc2\xc6\xc1\x44\x64\xfd\x28\x4a\x54\xcc\x0c\x22\xd0\xa1\xc8\xce\xfa\x73\x07\x5a\xba\x68\xd0\x90\x13\x01\x1a\x8d\xbd\xaf\x02\xa2\x6d\x20\x73\xa2\x35\x50\xa6\x30\x37\xfc\x04\x52\x38\x5e\xe1\x5c\x00\x07\x1f\x1a\x99\xa4\x27\x17\x1a\x5e\x90\x73\x3a\x86\x98\x18\x44\x0c\xf3\x12\x8d\x92\xcd\xeb\xf4\x8e\x52\xc7\x24\x97\xca\x72\x85\x73\xca\xfc\xc0\x14\xee\xe5\xa3\xd3\xe9\x7d\xa0\xda\x9d\xe1\x36\x22\x72\xb4\x19\x13\x00\xcc\xe5\x75\xff\xd8\x19\xa5\xb2\xa6\x78\x62\x9c\x93\x59\x25\xfd\x5f\xa9\x8a\xb9\x2e\xe5\xf1\xbf\xb2\xa6\x98\xe5\x05\xfb\x37\x46\xbf\x5b\x6e\x17\x6f\x36\x9b\x6b\x9b\x54\xdf\x0b\xdd\x28\x84\x52\x2a\xf6\x24\x85\x21\x1c\x54\xc3\x51\x03\x51\x08\x07\xe6\xd3\xfb\x22\x55\x3c\x54\xb4\x1a\x8f\xac\x11\x40\x67\xc2\x0e\x1d\x2e\x19\x59\xb7\xc8\xb6\xac\x1f\xfb\x81\xee\x4d\x35\xb6\x93\x4d\x36\xa0\x98\x4b\xe5\xc1\x81\x09\x78\x5f\x2a\x59\x61\x0c\xdf\xd3\x02\x63\x57\x43\xee\xc9\x9e\x28\xe6\x25\x24\x59\xa6\xd2\x63\x89\x0a\xbf\xf9\xdd\x30\xc3\xf1\xd3\xb5\x47\xb7\x7e\xf6\x9e\x2f\x4c\xa1\x11\x14\x95\xf5\x23\x50\x69\x0c\xd2\x90\x8e\x3e\x27\xbf\xbe\xd9\x8b\xdd\x0b\xd9\x60\xaf\x3e\xc4\x09\x0a\xc7\x10\xa0\x52\x41\x89\xc4\x96\x1b\x1d\x2c\xba\x8c\xa3\x72\x15\x47\xe5\x3a\x8e\xca\xdb\x38\x2a\x37\x71\x54\xbe\x71\x22\xbb\xc4\xf7\x90\xd0\x33\xa9\x5b\x3d\x8e\x43\xae\x15\xc3\x06\xba\xcd\x7c\x6d\x4b\x9d\xac\x0d\xab\xac\x04\x96\xad\xac\x4d\xc2\x04\xd8\xca\x61\x8b\x1d\x13\xda\x20\xa1\x36\xb4\x2c\x45\x36\xc1\xc3\xc4\xb1\xbe\xf4\xe4\x85\x29\x46\xac\xc7\x8e\x73\xea\x1f\xbb\x28\xb7\xce\xba\xf0\x55\x16\x47\xda\x28\x29\x8a\xb3\xba\xad\x62\x99\xe4\x14\xd5\xa8\x04\x3d\x83\xf0\x95\x14\xd2\x23\x3c\x4c\x20\xfc\x28\xad\x24\xa5\xb0\xc3\x6a\xd7\xf9\xc7\x1b\x63\x84\x2f\x56\xba\x5c\x52\x8c\xa3\x87\x8c\xc6\x91\x26\x55\x1d\x47\xb5\xc2\xb3\xa0\x3d\x40\xb6\xfc\x75\x4d\x72\x8c\xe1\xfe\x87\x8f\x52\xc8\xe4\x17\x2c\x1a\x4e\x54\x0c\x1f\x51\x70\x19\xc3\x47\x29\x48\x2e\x63\x78\x2f\x85\x96\x9c\xe8\x18\xae\x3e\xb0\x0c\x43\x4c\xdb\x23\x16\x1d\xdf\xcb\x46\x31\x54\xf0\x13\x1e\xaf\x62\xe8\x6e\x1d\xe6\x58\x2f\x28\x96\x58\x5d\x62\xcd\xa4\x1f\x5c\x18\x4e\x2a\xa9\x2b\xbb\x36\x8a\xb6\xb7\xb6\x9c\xf9\xeb\xda\xfa\xbd\xd3\x4d\xb6\x73\x0e\xdc\xe9\xa6\xee\x50\x52\x8f\x1b\x37\xcb\xda\xe5\xc7\x73\x3d\x81\x63\xda\x58\xcf\x37\xf5\x98\xef\xdd\xc6\x95\xd1\x01\xa8\x3a\x88\xa9\xa5\x66\x3e\xea\x14\x72\x62\xd8\xc1\x19\xe5\x80\xca\xd6\x2d\x9e\x10\xce\x0a\x91\x42\x46\x34\xda\xb3\x4e\x76\xdd\x64\xa1\xe3\x32\x46\x56\x29\x24\x8b\xd9\x6a\x63\x0d\xe6\x68\x9e\xb5\x91\xb5\x23\xb4\xeb\xc3\xf2\x63\x91\x87\x09\xda\xf5\x25\x4e\x53\xe3\x7a\x8f\xd0\x25\xe9\x33\x1c\xf5\x63\x7b\x00\xc9\x7a\x96\xdb\x0d\xac\xa9\x1c\x1e\xd7\xf3\xf6\x67\xdb\xae\x52\xb4\x7d\xa4\xc5\xe6\xed\x76\xbb\x78\xfb\x36\x86\xc1\x69\x0f\x5b\x93\x58\xbe\x5a\x2c\x57\xdb\xbb\xeb\x41\x84\x3b\xf1\x46\xb5\xe2\x5c\x47\x82\x37\xfe\x46\x91\xd7\x9b\xbb\xd5\xf6\xaf\x8b\xbc\xdc\x6e\x16\xb6\x49\x5e\x77\x66\x2e\x48\xad\x21\x43\x73\x44\x14\x03\xf1\xf5\x45\xf1\xf1\xd4\x3f\x5a\x30\xf2\xbe\xb9\x28\x42\xc3\x06\xf8\xa5\x5a\x94\x4b\xce\x49\xad\x31\x85\xf6\xbf\xcb\x7a\xb4\x9c\xc1\x7b\xd7\x8f\xba\xc8\xf6\xc9\x64\x7b\x6f\x3d\xd9\x93\x4c\x76\x2e\xa1\x52\x0f\xd0\xef\xac\x7f\x5b\x2e\xda\x37\xd1\x64\xc2\x64\x8d\x31\x52\xc4\x11\x13\x75\x63\xe2\x48\xd6\xa6\x50\xb2\xa9\xe3\x48\x23\xc7\xdc\xc4\x91\x35\x08\x51\x48\x2e\xf1\x69\x68\x80\x09\x10\x39\xf7\xae\x5f\xef\x69\x5e\xaa\xf3\x81\x36\x6e\x94\x82\xc9\x83\x7a\xe7\xf5\x9e\x8d\x7b\x56\x1b\x35\x3d\x2e\x07\x8d\x22\x42\xef\xa5\xaa\x06\x75\xa4\x6b\x9b\xfa\xf6\xf1\xe6\x38\x87\x48\x77\x34\x05\x21\x03\x30\x04\xa7\x0e\x3a\x2d\x92\x31\xce\xcc\xc9\xd6\x4c\xe7\x5d\xc8\x39\xcb\x1f\xfc\x33\xe3\x54\x77\x6f\x91\x81\x0b\x57\x17\x2e\xf4\x52\x84\xf8\x18\x0a\xf6\xbb\xbd\xe6\xbb\xd7\xfe\xe7\xeb\x4f\xdd\x82\xb2\x05\xbb\xf7\x5b\x37\x59\xc5\xcc\xeb\x4f\x83\x96\x85\xd4\x35\x12\x65\x6d\x92\x06\x1e\xa3\x88\x27\xf9\x83\x8d\x07\x41\xdb\xa8\x77\x7a\xd7\x44\xa1\x18\x47\xfe\x79\x2b\xab\x48\x81\xad\x5d\xc6\x55\xa4\xad\xb6\x95\xa4\xa8\xce\x21\xbc\x97\x79\xa3\x83\x89\x6c\x4f\x61\x23\xd5\xad\x39\x53\xb5\x35\xc1\xab\x9e\xba\x37\x90\xa3\x2a\x16\x4a\xbc\x6c\x8c\x8d\xae\x14\x48\x63\xe4\x44\xef\x64\x83\xc4\x62\x2d\xe1\xb0\x4b\x99\x38\x10\xce\xe8\xae\x97\x70\x97\x4d\xef\x70\x20\x60\xdb\xde\x79\x81\xf9\x83\x4c\x28\x1e\xe6\x19\x97\xd9\x7c\xb5\xdf\x22\xc9\xe9\x96\xae\xe9\x76\xbb\xc9\xb7\xeb\xbb\xec\x76\xb5\x59\x92\xcd\x66\x73\x47\xb7\x1b\x7a\xbb\xbd\xcd\xb7\x19\x2e\xe7\x9c\x9c\x64\x63\xe6\x8e\xdb\x5c\xa1\x9e\xdb\xc0\xd1\xb3\x5c\xeb\x57\x1f\xee\x56\x6f\x93\x0f\x77\xeb\xbb\xeb\x9e\x6a\x0d\x4b\x82\x88\xe7\xa7\x7d\x49\xa8\x3c\x0e\x83\x6d\x5c\x90\xdb\xaa\x05\xae\x6a\xb9\x39\xc4\xb0\x8a\x0c\x22\xbb\x56\xb2\x50\xa8\xb5\x63\xf1\x62\xc1\x9b\xdf\x44\xfd\xa0\xce\x1b\xa5\xa5\x0a\xbe\x92\x7b\x60\x22\x57\x7e\xea\x61\x79\x50\x6c\x7f\xf9\x80\x72\xd6\xed\xb7\x66\x69\xda\x46\x1f\x13\x02\x55\xa2\x6b\x26\x92\x36\x9a\xcf\x44\xd9\x98\x21\x71\xf0\x3c\xe8\x7b\x79\x79\xd9\x86\x9d\xe3\x7a\xba\x8e\x5e\xb4\x6e\x3e\x7a\x82\x4e\x23\x81\xdb\x04\x42\xa2\xf2\xf2\x85\x04\xb2\xb8\xb0\x67\xc8\xe9\x30\x87\xc2\xdd\x89\xdc\xef\x35\x9a\x14\x92\x55\xf7\x3a\x59\x3d\x83\x54\x02\x55\x1f\xb5\x2f\xe4\xb7\xef\xca\x8a\xe4\x3f\xdf\x8f\x2d\xea\x65\xec\x35\xd3\xcf\x0a\xfb\x8f\x00\xad\x50\xce\x5c\x29\xab\x95\xac\x6d\x4c\xa1\x7b\x2e\xec\x02\xfa\xee\x9e\x0f\x86\x3d\xe3\x98\x34\x35\x97\x84\xf6\x1d\xfe\x57\x91\xca\x32\x7d\xe1\x9d\x3c\x4e\x15\xca\x74\xcd\xc9\xe9\x99\xe8\xf0\x9d\x64\x55\x11\xe5\x9f\xe8\x61\x77\x0a\x9c\x69\x93\x30\x73\x6e\xea\xbc\xdb\xf4\xe0\x79\x66\x5b\xeb\xf1\x0c\xd2\x22\x5a\x6d\x6d\xa2\x18\x31\x63\x3c\xcb\xb8\xcc\x1f\xfe\xbb\x91\x06\xe3\x88\xf2\x38\xa2\x34\x7e\xe6\xf1\x16\x47\xa5\x8a\x23\xff\x3c\x89\xa3\xde\xc3\xa1\x57\x1b\xbf\x44\x91\x8b\x42\xfb\x5e\xbb\x98\x2f\xf4\x8b\xe5\x97\x28\xe2\x58\xa0\xf0\x20\x33\xa2\x48\x1e\x47\x0d\x8f\xa3\x0a\x45\x13\x26\x58\xda\xb4\xc3\xc1\x16\xd9\x5f\xba\xba\xd7\xe1\x2b\x0c\x8f\xa1\xb6\x97\xd0\xbd\xd1\xc0\xc4\xd4\x6c\xd0\x72\xb8\xc3\x98\x76\x08\x35\x68\xa7\xc3\xf0\xe5\xdc\xea\x70\x92\x63\xe9\x1e\x78\x20\xad\x1b\xcc\xe9\xab\xe0\xde\xce\x5a\x39\xc9\x86\x83\xd7\xd0\x92\xae\xd7\x8b\x85\xeb\x84\xef\x5f\x60\xe6\x1b\x62\x23\x9f\x79\x48\x16\x8a\x9c\xe0\x76\xb1\xf0\xfb\xbc\x96\xae\xe3\x4a\x3d\xe0\xf7\xae\x8a\x3b\x2b\x5d\xd2\x7c\xa5\xf3\x7a\xa5\xb0\x9c\x6c\x9d\x5e\x6d\x73\xb2\x26\xfb\x51\x0a\x78\x66\x49\xa5\x13\xf7\xdf\x33\x0c\x27\xe9\xff\x5f\xa6\x69\x9f\x57\x74\x56\xee\x6f\x61\x31\xbf\x89\xc6\x6e\x09\xe5\xc9\xa6\x5c\xa8\x40\xa3\x86\x49\x49\x8e\xdf\x5d\xf9\x9f\x57\x1e\xce\xfd\x99\x14\x6a\xc9\x84\x39\x0f\x07\x3e\x92\x07\x04\x37\xca\xa2\xcc\x35\x22\xb4\x2b\x6a\x54\x8a\xd7\x06\x8a\xc0\x3b\x9c\x0b\xf7\x04\x68\xeb\xce\xf4\x39\x04\x29\x7b\x51\xec\x98\x28\x74\xe6\xa0\xe7\xd7\xef\xae\x03\x1d\x07\x0f\xbb\x7e\x96\xfc\xef\xbe\x5a\x2c\xc3\x67\x0b\x4a\x61\x37\xae\xf3\x15\xa3\x94\xe3\xce\x7d\xbd\xb0\x2b\x13\x82\xb8\xd9\x78\x98\xca\x9f\xbe\x2a\xc5\x67\xbb\xb1\xaa\xa4\x98\x14\xe4\x95\xfb\x2f\x97\x95\xbd\x3a\x79\xb3\xbe\xdd\xae\x6f\x57\xcb\xc5\x75\x04\x00\xbf\x96\xcc\x4f\x54\x8d\x62\x45\x81\x0a\x08\xd4\x52\x2a\x7e\xf2\x5f\x07\x28\xda\x44\xe2\x4c\x18\x40\xa5\xfc\xa4\x52\x5b\xe0\x36\x52\x72\x6d\xfd\x02\xcc\x16\xa6\x9c\x37\xd4\xfa\xc9\xca\xa9\x59\x21\x42\xb2\x55\x45\x1c\xe9\x43\x11\x47\x07\x46\x51\xc6\x51\x4e\xc4\x81\xe8\x38\x22\x0d\x65\x32\x8e\xd8\x5e\x91\x0a\xe3\x08\xab\x0c\x69\x1c\xc9\xec\x73\xdb\xed\x0f\xdd\x30\x0c\xcd\x69\x6b\x5e\x86\xe8\x7b\x29\xb4\x51\xc4\x56\x4d\xdb\x1a\x6b\x57\x1a\x9c\x20\xba\xc5\x0c\xdf\x52\xfb\xaf\x52\x8e\x5c\xdb\x06\x5e\xf9\x96\x80\x59\x6d\x8d\x62\x42\xb3\x1c\x88\xae\xad\x6c\xae\xbe\xff\x1f\x22\xa1\xb3\x86\xe3\x1f\x2a\xc4\x63\x37\x39\x0d\x6f\xb6\xa9\x3e\x2b\x4c\x75\xfb\xb9\x16\xde\x92\x90\x61\x49\x0e\x4c\x2a\xf7\xb2\x72\x03\x6f\x46\x29\x8a\x1d\x10\x63\x14\xcb\x1a\x83\xa1\x95\xf2\xeb\x9f\x86\x96\xed\x7a\x91\x9b\x18\xba\x0f\x48\x70\xf1\x01\xc9\x3d\x3d\x38\x31\x98\x3c\x86\x92\x33\x5a\x3e\xf5\x97\x95\x34\xc4\x60\x7f\x45\x3f\xe0\x71\x78\xd4\xad\x0c\x4e\xe9\x9c\x70\x77\xff\x72\xb4\x74\xea\x2f\xd5\x44\xd8\x3d\x30\x58\x38\x0d\x16\x98\xc8\xcb\xe4\x49\xca\xaa\xbf\xaa\x73\x25\x39\x4f\xb4\x20\x75\xa2\x8d\x62\xb9\x11\xa8\x75\x6a\x9b\xa5\x47\x56\x31\x73\xea\x76\x4a\x45\x99\x20\x7c\x70\x98\x13\x5d\x22\x4d\x9e\x50\xc9\xfe\xba\x68\x2a\x54\x2c\x4f\x7c\xad\x99\xa2\x84\x86\x64\xf2\x90\x22\xb9\x1f\x7f\x9d\x69\xf6\x4d\x95\x30\xe1\x9a\xd5\xd1\xaa\xef\x61\xbb\x0f\x88\xbe\x91\xbd\x20\xb7\x88\xbd\xdf\xef\x87\xf4\x40\x50\x45\xf6\xcd\x66\x0b\xcb\xf5\x02\x56\xb7\x6f\x60\x0e\x8b\xd9\xe6\x7a\xf2\xa6\xf6\xd5\xb3\x80\x05\xbc\x5a\x2c\x16\x8b\xe1\xae\xe7\xc9\x5f\xa3\x78\x51\x90\x4e\xed\xc8\x78\xa3\xfa\x9a\x67\xca\xe6\x82\xf7\xd4\x79\x35\x97\xc2\x28\xa2\x07\x36\xb2\x65\xde\x85\x4b\x7f\xb1\x6c\xb0\x0b\xc6\xf3\x2a\x13\x16\x3c\x06\xfe\x25\xa6\x51\xa3\x5d\x1a\x6b\x46\xfa\x0b\x54\xc9\xba\x53\xae\x27\x22\xc9\x1f\x1c\xe9\x42\xf6\x8e\x30\xa9\x44\x47\x9e\xd2\xa6\x23\x4e\xaa\xd5\x51\xa7\xf5\xeb\xc8\x97\x8a\x76\xa4\xae\xe2\x4f\xd0\xa6\xac\x71\x26\x76\x66\xf9\x12\x45\xb3\x3d\xc7\xc7\x21\xa0\xd8\x15\x4f\xab\x98\x48\x4a\x9b\x77\x88\xfe\x3d\xe1\x16\xda\xef\xb0\x8b\xc5\xa1\xf4\xfb\x8e\xc9\xbe\x09\xd3\xea\x01\x12\xb6\xf7\xdb\x78\xf1\x13\x30\xfb\xc3\x7f\xdf\x73\x69\x93\x4b\xde\x54\xc2\x6f\xb4\x0f\x03\x9d\xe4\x28\x5a\xd8\x72\x65\xc1\xbd\x17\x74\x0a\x7e\x3d\x5c\x29\x85\x71\xc3\xfd\x7f\xce\xd4\xdf\x8a\xe0\xa6\x58\x6f\x1e\x2f\x26\xf4\xeb\xd9\xdd\x46\xf9\xf1\xff\xf0\xa3\xf5\xb7\xd1\x97\xff\x09\x00\x00\xff\xff\x44\x8d\x0c\xb4\xb1\x21\x00\x00")

func publicAssetsCssIndexCssBytes() ([]byte, error) {
	return bindataRead(
		_publicAssetsCssIndexCss,
		"public/assets/css/index.css",
	)
}

func publicAssetsCssIndexCss() (*asset, error) {
	bytes, err := publicAssetsCssIndexCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/assets/css/index.css", size: 8625, mode: os.FileMode(420), modTime: time.Unix(1644090672, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public/assets/css/index.css": publicAssetsCssIndexCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"assets": &bintree{nil, map[string]*bintree{
			"css": &bintree{nil, map[string]*bintree{
				"index.css": &bintree{publicAssetsCssIndexCss, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
